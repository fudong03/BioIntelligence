import torch
import os
from biopandas.pdb import PandasPdb
from torch.utils.data import Dataset, DataLoader
import numpy as np
import pandas as pd

# Amino acid alphabet and mapping with 3-letter codes
amino_acids = {
    "ALA": 0, "CYS": 1, "ASP": 2, "GLU": 3, "PHE": 4,
    "GLY": 5, "HIS": 6, "ILE": 7, "LYS": 8, "LEU": 9,
    "MET": 10, "ASN": 11, "PRO": 12, "GLN": 13, "ARG": 14,
    "SER": 15, "THR": 16, "VAL": 17, "TRP": 18, "TYR": 19
}

# protein to label mapping
protein_labels = {'Protease': 0, 'Kinase': 1, 'Receptor': 2, 'Carbonic Anhydrase': 3, 'Phosphatase': 4, 'Isomerase': 5}
target_to_labels = {0: 'Protease', 1: 'Kinase', 2: 'Receptor', 3: 'Carbonic Anhydrase', 4: 'Phosphatase', 5: 'Isomerase'}


class ProteinDataset(Dataset):
    """
        Dataset for protein data obtain from Protein Data Bank (PDB).

        Statistics for the dataset when the config file generated by setting seed to 0:
        1. Number of proteins:
            - Training: 7211
            - Validation: 1803
            - Total: 9014

        2. Details of labels:
            - Training: {'Protease': 2439, 'Kinase': 2003, 'Receptor': 1172, 'Carbonic Anhydrase': 972, 'Phosphatase': 343, 'Isomerase': 282}
            - Validation: {'Protease': 628, 'Kinase': 499, 'Receptor': 265, 'Carbonic Anhydrase': 234, 'Phosphatase': 89, 'Isomerase': 88}
            - Total: {'Protease': 3067, 'Kinase': 2502, 'Receptor': 1437, 'Carbonic Anhydrase': 1206, 'Phosphatase': 431, 'Isomerase': 371}

        3. Longest (or shortest) chain of amino acids:
            - Training: 506 (or 159)
            - Validation: 506 (or 153)
    """

    def __init__(self, root, txt):

        self.root = root
        self.proteins = []

        self.chains = []
        self.labels = []

        with open(txt) as f:
            for line in f:
                protein, chain, label = line.split()

                self.proteins.append(protein)
                self.chains.append(chain)
                self.labels.append(int(label))

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, index):

        protein = self.proteins[index]
        chain = self.chains[index]
        label = self.labels[index]

        path = os.path.join(self.root, protein + ".pdb")

        # read protein data
        pl = PandasPdb().read_pdb(path)
        data = pl.df['ATOM']
        # filter by chain
        data = data[data['chain_id'] == chain]

        # consider only the residue sequence
        data = data[['residue_number', 'residue_name']].drop_duplicates()

        # get amino acid sequence
        sequence = data['residue_name'].values.tolist()

        embed = self.one_hot_embedding(sequence)
        # convert int to float
        embed = embed.astype(np.float32)

        return embed, label

    def one_hot_embedding(self, sequence):
        """
        Creates one-hot embeddings for a given amino acid sequence using numpy.

        Args:
            sequence (str): Amino acid sequence using 3-letter codes.

        Returns:
            numpy.ndarray: One-hot embeddings of the amino acid sequence.
        """
        num_amino_acids = len(amino_acids)
        embedding = np.zeros((len(sequence), num_amino_acids), dtype=int)
        for i, aa in enumerate(sequence):
            if aa in amino_acids:
                embedding[i, amino_acids[aa]] = 1
        return embedding


def get_label_name(label):
    return target_to_labels[label]

def save_list_to_csv(int_list, file_path):
    # Create a DataFrame from the list of integers
    df = pd.DataFrame({'Seq Length': int_list})

    # Save the DataFrame to a CSV file
    df.to_csv(file_path, index=True)


if __name__ == '__main__':
    torch.manual_seed(0)
    np.random.seed(0)

    config_root = "./../data"
    pdb_root = "/mnt/data/protein/data"

    # train_set = ProteinDataset(pdb_root, os.path.join(config_root, "protein_train.txt"))
    val_set = ProteinDataset(pdb_root, os.path.join(config_root, "protein_val.txt"))

    # train_loader = DataLoader(train_set, batch_size=1, shuffle=False, num_workers=8)
    val_loader = DataLoader(val_set, batch_size=1, shuffle=False, num_workers=8)

    max_seq_len = float('-inf')
    min_seq_len = float('inf')
    for i, (embed, label, protein, chain) in enumerate(val_loader):
        print(embed.shape, label.shape)
        print(protein[0], chain[0])

        max_seq_len = max(max_seq_len, embed.shape[1])
        min_seq_len = min(min_seq_len, embed.shape[1])


    print()
    print("max_seq_len: {}, min_seq_len: {}".format(max_seq_len, min_seq_len))

